#include <fak/lang/token.h>
#include <fak/log.h>

std::string fk::lang::token_type_str(fk::lang::TokenType type) noexcept
{
    switch (type) {
    case fk::lang::TokenType::IDENTIFIER:
        return "IDENTIFIER";
    case fk::lang::TokenType::EQ:
        return "EQ";
    case fk::lang::TokenType::EQEQ:
        return "EQEQ";
    case fk::lang::TokenType::NEQ:
        return "NEQ";
    case fk::lang::TokenType::LT:
        return "LT";
    case fk::lang::TokenType::LTE:
        return "LTE";
    case fk::lang::TokenType::GT:
        return "GT";
    case fk::lang::TokenType::GTE:
        return "GTE";
    case fk::lang::TokenType::MINUS:
        return "MINUS";
    case fk::lang::TokenType::MINUSEQ:
        return "MINUSEQ";
    case fk::lang::TokenType::PLUS:
        return "PLUS";
    case fk::lang::TokenType::PLUSEQ:
        return "PLUSEQ";
    case fk::lang::TokenType::FSLASH:
        return "FSLASH";
    case fk::lang::TokenType::FSLASHEQ:
        return "FSLASHEQ";
    case fk::lang::TokenType::STAR:
        return "STAR";
    case fk::lang::TokenType::STAREQ:
        return "STAREQ";
    case fk::lang::TokenType::BANG:
        return "BANG";
    case fk::lang::TokenType::LPAREN:
        return "LPAREN";
    case fk::lang::TokenType::RPAREN:
        return "RPAREN";
    case fk::lang::TokenType::LBRACE:
        return "LBRACE";
    case fk::lang::TokenType::RBRACE:
        return "RBRACE";
    case fk::lang::TokenType::LBRACKET:
        return "LBRACKET";
    case fk::lang::TokenType::RBRACKET:
        return "RBRACKET";
    case fk::lang::TokenType::FK_TRUE:
        return "BTRUE";
    case fk::lang::TokenType::FK_FALSE:
        return "BFALSE";
    case fk::lang::TokenType::NIL:
        return "NIL";
    case fk::lang::TokenType::PRINT:
        return "PRINT";
    case fk::lang::TokenType::IF:
        return "IF";
    case fk::lang::TokenType::ELSE:
        return "ELSE";
    case fk::lang::TokenType::AND:
        return "AND";
    case fk::lang::TokenType::OR:
        return "OR";
    case fk::lang::TokenType::WHILE:
        return "WHILE";
    case fk::lang::TokenType::FOR:
        return "FOR";
    case fk::lang::TokenType::SEMICOLON:
        return "SEMICOLON";
    case fk::lang::TokenType::LET:
        return "LET";
    case fk::lang::TokenType::EXPORT:
        return "EXPORT";
    case fk::lang::TokenType::COMMA:
        return "COMMA";
    case fk::lang::TokenType::FN:
        return "FN";
    case fk::lang::TokenType::FK_RETURN:
        return "RETURN";
    case fk::lang::TokenType::DATA:
        return "DATA";
    case fk::lang::TokenType::INC:
        return "INC";
    case fk::lang::TokenType::DEC:
        return "DEC";
    case fk::lang::TokenType::COLON:
        return "COLON";
    case fk::lang::TokenType::DOT:
        return "DOT";
    case fk::lang::TokenType::NUMBER:
        return "NUMBER";
    case fk::lang::TokenType::STRING:
        return "STRING";
    case fk::lang::TokenType::COMMAND:
        return "COMMAND";
    case fk::lang::TokenType::FK_EOF:
        return "EOF";
    case fk::lang::TokenType::UNKNOWN:
        return "UNKNOWN";
    default:
        FK_FATAL("unknown token type: this should never happen");
    }
}